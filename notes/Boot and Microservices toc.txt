Boot and Microservices
=========================
1.spring boot core, AOP, data (jdbc template, data jpa)- good
2.spring boot web mvc and rest api (basics)
3.Hibernate and database basics - mandate
4.java17 and design patterns
====================================================

=> Boot Data JPA
=> Boot Rest API
=> Microservices
	=> Micro service communications uisng Rabbit MQ and Kafka
=> Microservices cloud
	=> Feign client
	=> Config server and Config client (cloud bus)
	=> Centralising configuration through git
	=> Eureka Service Discovery
	=> API Gateways (Routings)
	=> Fallback operations 
	=> Central logging

====================================================================



Spring Boot, when used in conjunction with Spring Cloud, provides a comprehensive platform for building microservices-based applications. Here are some of the main topics you'll want to cover when diving into Spring Boot microservices:

Introduction to Microservices:

Definition and advantages of microservices.
Differences between monolithic and microservices architectures.
Spring Boot Basics:

Setting up a Spring Boot project.
Understanding the Spring Boot Auto Configuration.
Building RESTful Web Services with Spring Boot.
Service Discovery with Eureka:

Why service discovery is important in a microservices architecture.
Setting up a Eureka server and registering services.
Load Balancing with Ribbon:

Client-side load balancing.
Integrating Ribbon with Eureka for dynamic service discovery.
API Gateway with Zuul:

Why we need an API gateway.
Routing and filtering requests with Zuul.
Integration with Eureka and Ribbon.
Distributed Configuration with Spring Cloud Config:

Centralizing configuration across multiple microservices.
Setting up a config server and client.
Handling Faults and Failures with Hystrix:

Circuit Breaker pattern.
Monitoring with Hystrix dashboard.
Tracing with Spring Cloud Sleuth and Zipkin:

Tracing requests across services.
Visualizing traces with Zipkin.
Messaging with Kafka or RabbitMQ:

Why asynchronous communication is crucial in microservices.
Integrating Spring Boot with messaging systems.
Data Persistence:

Using Spring Data JPA with relational databases.
Handling database migrations with Flyway or Liquibase.
Microservices Security:

OAuth2 and JWT for securing microservices.
Securing services behind an API gateway.
Distributed Sessions with Spring Session:

Storing session data in distributed systems.
Integration with Redis or Hazelcast.
Containerization and Deployment:

Packaging microservices as Docker containers.
Orchestrating containers using Kubernetes.
Monitoring Microservices:

Metrics collection using Micrometer.
Monitoring tools like Prometheus and Grafana.
Continuous Integration/Continuous Deployment (CI/CD):

Automating build and deployment using tools like Jenkins or GitLab CI/CD.
Best Practices:

Microservices design patterns.
Logging, testing, and documentation.
Spring Cloud Contract:

Consumer Driven Contracts.
Ensuring service-to-service compatibility.

==============================================================










Software list
================
1.JDK 17 or above
2.Eclipse for Java EE / IntelliJ Idea / STS
3.MongoDB or MYSQL8 database
4.Postman
5.git
6.Rabbit MQ and Apache Kafka for message brokers

==========================












